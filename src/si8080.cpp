#include "si8080.h"

const unsigned char romh[2048] = {0x00,0x00,0x00,0xC3,0xD4,0x18,0x00,0x00,0xF5,0xC5,0xD5,0xE5,0xC3,0x8C,0x00,0x00,0xF5,0xC5,0xD5,0xE5,0x3E,0x80,0x32,0x72,0x20,0x21,0xC0,0x20,0x35,0xCD,0xCD,0x17,0xDB,0x01,0x0F,0xDA,0x67,0x00,0x3A,0xEA,0x20,0xA7,0xCA,0x42,0x00,0x3A,0xEB,0x20,0xFE,0x99,0xCA,0x3E,0x00,0xC6,0x01,0x27,0x32,0xEB,0x20,0xCD,0x47,0x19,0xAF,0x32,0xEA,0x20,0x3A,0xE9,0x20,0xA7,0xCA,0x82,0x00,0x3A,0xEF,0x20,0xA7,0xC2,0x6F,0x00,0x3A,0xEB,0x20,0xA7,0xC2,0x5D,0x00,0xCD,0xBF,0x0A,0xC3,0x82,0x00,0x3A,0x93,0x20,0xA7,0xC2,0x82,0x00,0xC3,0x65,0x07,0x3E,0x01,0x32,0xEA,0x20,0xC3,0x3F,0x00,0xCD,0x40,0x17,0x3A,0x32,0x20,0x32,0x80,0x20,0xCD,0x00,0x01,0xCD,0x48,0x02,0xCD,0x13,0x09,0x00,0xE1,0xD1,0xC1,0xF1,0xFB,0xC9,0x00,0x00,0x00,0x00,0xAF,0x32,0x72,0x20,0x3A,0xE9,0x20,0xA7,0xCA,0x82,0x00,0x3A,0xEF,0x20,0xA7,0xC2,0xA5,0x00,0x3A,0xC1,0x20,0x0F,0xD2,0x82,0x00,0x21,0x20,0x20,0xCD,0x4B,0x02,0xCD,0x41,0x01,0xC3,0x82,0x00,0xCD,0x86,0x08,0xE5,0x7E,0x23,0x66,0x6F,0x22,0x09,0x20,0x22,0x0B,0x20,0xE1,0x2B,0x7E,0xFE,0x03,0xC2,0xC8,0x00,0x3D,0x32,0x08,0x20,0xFE,0xFE,0x3E,0x00,0xC2,0xD3,0x00,0x3C,0x32,0x0D,0x20,0xC9,0x3E,0x02,0x32,0xFB,0x21,0x32,0xFB,0x22,0xC3,0xE4,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x02,0x20,0x7E,0xA7,0xC2,0x38,0x15,0xE5,0x3A,0x06,0x20,0x6F,0x3A,0x67,0x20,0x67,0x7E,0xA7,0xE1,0xCA,0x36,0x01,0x23,0x23,0x7E,0x23,0x46,0xE6,0xFE,0x07,0x07,0x07,0x5F,0x16,0x00,0x21,0x00,0x1C,0x19,0xEB,0x78,0xA7,0xC4,0x3B,0x01,0x2A,
								0x0B,0x20,0x06,0x10,0xCD,0xD3,0x15,0xAF,0x32,0x00,0x20,0xC9,0x21,0x30,0x00,0x19,0xEB,0xC9,0x3A,0x68,0x20,0xA7,0xC8,0x3A,0x00,0x20,0xA7,0xC0,0x3A,0x67,0x20,0x67,0x3A,0x06,0x20,0x16,0x02,0x3C,0xFE,0x37,0xCC,0xA1,0x01,0x6F,0x46,0x05,0xC2,0x54,0x01,0x32,0x06,0x20,0xCD,0x7A,0x01,0x61,0x22,0x0B,0x20,0x7D,0xFE,0x28,0xDA,0x71,0x19,0x7A,0x32,0x04,0x20,0x3E,0x01,0x32,0x00,0x20,0xC9,0x16,0x00,0x7D,0x21,0x09,0x20,0x46,0x23,0x4E,0xFE,0x0B,0xFA,0x94,0x01,0xDE,0x0B,0x5F,0x78,0xC6,0x10,0x47,0x7B,0x14,0xC3,0x83,0x01,0x68,0xA7,0xC8,0x5F,0x79,0xC6,0x10,0x4F,0x7B,0x3D,0xC3,0x95,0x01,0x15,0xCA,0xCD,0x01,0x21,0x06,0x20,0x36,0x00,0x23,0x4E,0x36,0x00,0xCD,0xD9,0x01,0x21,0x05,0x20,0x7E,0x3C,0xE6,0x01,0x77,0xAF,0x21,0x67,0x20,0x66,0xC9,0x00,0x21,0x00,0x21,0x06,0x37,0x36,0x01,0x23,0x05,0xC2,0xC5,0x01,0xC9,0xE1,0xC9,0x3E,0x01,0x06,0xE0,0x21,0x02,0x24,0xC3,0xCC,0x14,0x23,0x46,0x23,0x79,0x86,0x77,0x23,0x78,0x86,0x77,0xC9,0x06,0xC0,0x11,0x00,0x1B,0x21,0x00,0x20,0xC3,0x32,0x1A,0x21,0x42,0x21,0xC3,0xF8,0x01,0x21,0x42,0x22,0x0E,0x04,0x11,0x20,0x1D,0xD5,0x06,0x2C,0xCD,0x32,0x1A,0xD1,0x0D,0xC2,0xFD,0x01,0xC9,0x3E,0x01,0xC3,0x1B,0x02,0x3E,0x01,0xC3,0x14,0x02,0xAF,0x11,0x42,0x22,0xC3,0x1E,0x02,0xAF,0x11,0x42,0x21,0x32,0x81,0x20,0x01,0x02,0x16,0x21,0x06,0x28,0x3E,0x04,0xF5,0xC5,0x3A,0x81,0x20,0xA7,0xC2,0x42,0x02,0xCD,0x69,0x1A,0xC1,0xF1,0x3D,0xC8,0xD5,0x11,0xE0,0x02,0x19,0xD1,0xC3,0x29,0x02,0xCD,0x7C,0x14,0xC3,0x35,0x02,0x21,0x10,0x20,0x7E,0xFE,0xFF,0xC8,0xFE,0xFE,0xCA,0x81,0x02,0x23,0x46,0x4F,0xB0,0x79,0xC2,0x77,0x02,0x23,0x7E,
								0xA7,0xC2,0x88,0x02,0x23,0x5E,0x23,0x56,0xE5,0xEB,0xE5,0x21,0x6F,0x02,0xE3,0xD5,0xE9,0xE1,0x11,0x0C,0x00,0x19,0xC3,0x4B,0x02,0x05,0x04,0xC2,0x7D,0x02,0x3D,0x05,0x70,0x2B,0x77,0x11,0x10,0x00,0x19,0xC3,0x4B,0x02,0x35,0x2B,0x2B,0xC3,0x81,0x02,0xE1,0x23,0x7E,0xFE,0xFF,0xCA,0x3B,0x03,0x23,0x35,0xC0,0x47,0xAF,0x32,0x68,0x20,0x32,0x69,0x20,0x3E,0x30,0x32,0x6A,0x20,0x78,0x36,0x05,0x23,0x35,0xC2,0x9B,0x03,0x2A,0x1A,0x20,0x06,0x10,0xCD,0x24,0x14,0x21,0x10,0x20,0x11,0x10,0x1B,0x06,0x10,0xCD,0x32,0x1A,0x06,0x00,0xCD,0xDC,0x19,0x3A,0x6D,0x20,0xA7,0xC0,0x3A,0xEF,0x20,0xA7,0xC8,0x31,0x00,0x24,0xFB,0xCD,0xD7,0x19,0xCD,0x2E,0x09,0xA7,0xCA,0x6D,0x16,0xCD,0xE7,0x18,0x7E,0xA7,0xCA,0x2C,0x03,0x3A,0xCE,0x20,0xA7,0xCA,0x2C,0x03,0x3A,0x67,0x20,0xF5,0x0F,0xDA,0x32,0x03,0xCD,0x0E,0x02,0xCD,0x78,0x08,0x73,0x23,0x72,0x2B,0x2B,0x70,0x00,0xCD,0xE4,0x01,0xF1,0x0F,0x3E,0x21,0x06,0x00,0xD2,0x12,0x03,0x06,0x20,0x3E,0x22,0x32,0x67,0x20,0xCD,0xB6,0x0A,0xAF,0x32,0x11,0x20,0x78,0xD3,0x05,0x3C,0x32,0x98,0x20,0xCD,0xD6,0x09,0xCD,0x7F,0x1A,0xC3,0xF9,0x07,0xCD,0x7F,0x1A,0xC3,0x17,0x08,0xCD,0x09,0x02,0xC3,0xF8,0x02,0x00,0x00,0x00,0x21,0x68,0x20,0x36,0x01,0x23,0x7E,0xA7,0xC3,0xB0,0x03,0x00,0x2B,0x36,0x01,0x3A,0x1B,0x20,0x47,0x3A,0xEF,0x20,0xA7,0xC2,0x63,0x03,0x3A,0x1D,0x20,0x0F,0xDA,0x81,0x03,0x0F,0xDA,0x8E,0x03,0xC3,0x6F,0x03,0xCD,0xC0,0x17,0x07,0x07,0xDA,0x81,0x03,0x07,0xDA,0x8E,0x03,0x21,0x18,0x20,0xCD,0x3B,0x1A,0xCD,0x47,0x1A,0xCD,0x39,0x14,0x3E,0x00,0x32,0x12,0x20,0xC9,0x78,0xFE,0xD9,0xCA,0x6F,0x03,0x3C,0x32,0x1B,0x20,0xC3,0x6F,
								0x03,0x78,0xFE,0x30,0xCA,0x6F,0x03,0x3D,0x32,0x1B,0x20,0xC3,0x6F,0x03,0x3C,0xE6,0x01,0x32,0x15,0x20,0x07,0x07,0x07,0x07,0x21,0x70,0x1C,0x85,0x6F,0x22,0x18,0x20,0xC3,0x6F,0x03,0xC2,0x4A,0x03,0x23,0x35,0xC2,0x4A,0x03,0xC3,0x46,0x03,0x11,0x2A,0x20,0xCD,0x06,0x1A,0xE1,0xD0,0x23,0x7E,0xA7,0xC8,0xFE,0x01,0xCA,0xFA,0x03,0xFE,0x02,0xCA,0x0A,0x04,0x23,0xFE,0x03,0xC2,0x2A,0x04,0x35,0xCA,0x36,0x04,0x7E,0xFE,0x0F,0xC0,0xE5,0xCD,0x30,0x04,0xCD,0x52,0x14,0xE1,0x23,0x34,0x23,0x23,0x35,0x35,0x23,0x35,0x35,0x35,0x23,0x36,0x08,0xCD,0x30,0x04,0xC3,0x00,0x14,0x3C,0x77,0x3A,0x1B,0x20,0xC6,0x08,0x32,0x2A,0x20,0xCD,0x30,0x04,0xC3,0x00,0x14,0xCD,0x30,0x04,0xD5,0xE5,0xC5,0xCD,0x52,0x14,0xC1,0xE1,0xD1,0x3A,0x2C,0x20,0x85,0x6F,0x32,0x29,0x20,0xCD,0x91,0x14,0x3A,0x61,0x20,0xA7,0xC8,0x32,0x02,0x20,0xC9,0xFE,0x05,0xC8,0xC3,0x36,0x04,0x21,0x27,0x20,0xC3,0x3B,0x1A,0xCD,0x30,0x04,0xCD,0x52,0x14,0x21,0x25,0x20,0x11,0x25,0x1B,0x06,0x07,0xCD,0x32,0x1A,0x2A,0x8D,0x20,0x2C,0x7D,0xFE,0x63,0xDA,0x53,0x04,0x2E,0x54,0x22,0x8D,0x20,0x2A,0x8F,0x20,0x2C,0x22,0x8F,0x20,0x3A,0x84,0x20,0xA7,0xC0,0x7E,0xE6,0x01,0x01,0x29,0x02,0xC2,0x6E,0x04,0x01,0xE0,0xFE,0x21,0x8A,0x20,0x71,0x23,0x23,0x70,0xC9,0xE1,0x3A,0x32,0x1B,0x32,0x32,0x20,0x2A,0x38,0x20,0x7D,0xB4,0xC2,0x8A,0x04,0x2B,0x22,0x38,0x20,0xC9,0x11,0x35,0x20,0x3E,0xF9,0xCD,0x50,0x05,0x3A,0x46,0x20,0x32,0x70,0x20,0x3A,0x56,0x20,0x32,0x71,0x20,0xCD,0x63,0x05,0x3A,0x78,0x20,0xA7,0x21,0x35,0x20,0xC2,0x5B,0x05,0x11,0x30,0x1B,0x21,0x30,0x20,0x06,0x10,0xC3,0x32,0x1A,0xE1,0x3A,0x6E,0x20,0xA7,0xC0,
								0x3A,0x80,0x20,0xFE,0x01,0xC0,0x11,0x45,0x20,0x3E,0xED,0xCD,0x50,0x05,0x3A,0x36,0x20,0x32,0x70,0x20,0x3A,0x56,0x20,0x32,0x71,0x20,0xCD,0x63,0x05,0x3A,0x76,0x20,0xFE,0x10,0xDA,0xE7,0x04,0x3A,0x48,0x1B,0x32,0x76,0x20,0x3A,0x78,0x20,0xA7,0x21,0x45,0x20,0xC2,0x5B,0x05,0x11,0x40,0x1B,0x21,0x40,0x20,0x06,0x10,0xCD,0x32,0x1A,0x3A,0x82,0x20,0x3D,0xC2,0x08,0x05,0x3E,0x01,0x32,0x6E,0x20,0x2A,0x76,0x20,0xC3,0x7E,0x06,0xE1,0x11,0x55,0x20,0x3E,0xDB,0xCD,0x50,0x05,0x3A,0x46,0x20,0x32,0x70,0x20,0x3A,0x36,0x20,0x32,0x71,0x20,0xCD,0x63,0x05,0x3A,0x76,0x20,0xFE,0x15,0xDA,0x34,0x05,0x3A,0x58,0x1B,0x32,0x76,0x20,0x3A,0x78,0x20,0xA7,0x21,0x55,0x20,0xC2,0x5B,0x05,0x11,0x50,0x1B,0x21,0x50,0x20,0x06,0x10,0xCD,0x32,0x1A,0x2A,0x76,0x20,0x22,0x58,0x20,0xC9,0x32,0x7F,0x20,0x21,0x73,0x20,0x06,0x0B,0xC3,0x32,0x1A,0x11,0x73,0x20,0x06,0x0B,0xC3,0x32,0x1A,0x21,0x73,0x20,0x7E,0xE6,0x80,0xC2,0xC1,0x05,0x3A,0xC1,0x20,0xFE,0x04,0x3A,0x69,0x20,0xCA,0xB7,0x05,0xA7,0xC8,0x23,0x36,0x00,0x3A,0x70,0x20,0xA7,0xCA,0x89,0x05,0x47,0x3A,0xCF,0x20,0xB8,0xD0,0x3A,0x71,0x20,0xA7,0xCA,0x96,0x05,0x47,0x3A,0xCF,0x20,0xB8,0xD0,0x23,0x7E,0xA7,0xCA,0x1B,0x06,0x2A,0x76,0x20,0x4E,0x23,0x00,0x22,0x76,0x20,0xCD,0x2F,0x06,0xD0,0xCD,0x7A,0x01,0x79,0xC6,0x07,0x67,0x7D,0xD6,0x0A,0x6F,0x22,0x7B,0x20,0x21,0x73,0x20,0x7E,0xF6,0x80,0x77,0x23,0x34,0xC9,0x11,0x7C,0x20,0xCD,0x06,0x1A,0xD0,0x23,0x7E,0xE6,0x01,0xC2,0x44,0x06,0x23,0x34,0xCD,0x75,0x06,0x3A,0x79,0x20,0xC6,0x03,0x21,0x7F,0x20,0xBE,0xDA,0xE2,0x05,0xD6,0x0C,0x32,0x79,0x20,0x3A,0x7B,0x20,0x47,0x3A,0x7E,
								0x20,0x80,0x32,0x7B,0x20,0xCD,0x6C,0x06,0x3A,0x7B,0x20,0xFE,0x15,0xDA,0x12,0x06,0x3A,0x61,0x20,0xA7,0xC8,0x3A,0x7B,0x20,0xFE,0x1E,0xDA,0x12,0x06,0xFE,0x27,0x00,0xD2,0x12,0x06,0x97,0x32,0x15,0x20,0x3A,0x73,0x20,0xF6,0x01,0x32,0x73,0x20,0xC9,0x3A,0x1B,0x20,0xC6,0x08,0x67,0xCD,0x6F,0x15,0x79,0xFE,0x0C,0xDA,0xA5,0x05,0x0E,0x0B,0xC3,0xA5,0x05,0x0D,0x3A,0x67,0x20,0x67,0x69,0x16,0x05,0x7E,0xA7,0x37,0xC0,0x7D,0xC6,0x0B,0x6F,0x15,0xC2,0x37,0x06,0xC9,0x21,0x78,0x20,0x35,0x7E,0xFE,0x03,0xC2,0x67,0x06,0xCD,0x75,0x06,0x21,0xDC,0x1C,0x22,0x79,0x20,0x21,0x7C,0x20,0x35,0x35,0x2B,0x35,0x35,0x3E,0x06,0x32,0x7D,0x20,0xC3,0x6C,0x06,0xA7,0xC0,0xC3,0x75,0x06,0x21,0x79,0x20,0xCD,0x3B,0x1A,0xC3,0x91,0x14,0x21,0x79,0x20,0xCD,0x3B,0x1A,0xC3,0x52,0x14,0x22,0x48,0x20,0xC9,0xE1,0x3A,0x80,0x20,0xFE,0x02,0xC0,0x21,0x83,0x20,0x7E,0xA7,0xCA,0x0F,0x05,0x3A,0x56,0x20,0xA7,0xC2,0x0F,0x05,0x23,0x7E,0xA7,0xC2,0xAB,0x06,0x3A,0x82,0x20,0xFE,0x08,0xDA,0x0F,0x05,0x36,0x01,0xCD,0x3C,0x07,0x11,0x8A,0x20,0xCD,0x06,0x1A,0xD0,0x21,0x85,0x20,0x7E,0xA7,0xC2,0xD6,0x06,0x21,0x8A,0x20,0x7E,0x23,0x23,0x86,0x32,0x8A,0x20,0xCD,0x3C,0x07,0x21,0x8A,0x20,0x7E,0xFE,0x28,0xDA,0xF9,0x06,0xFE,0xE1,0xD2,0xF9,0x06,0xC9,0x06,0xFE,0xCD,0xDC,0x19,0x23,0x35,0x7E,0xFE,0x1F,0xCA,0x4B,0x07,0xFE,0x18,0xCA,0x0C,0x07,0xA7,0xC0,0x06,0xEF,0x21,0x98,0x20,0x7E,0xA0,0x77,0xE6,0x20,0xD3,0x05,0x00,0x00,0x00,0xCD,0x42,0x07,0xCD,0xCB,0x14,0x21,0x83,0x20,0x06,0x0A,0xCD,0x5F,0x07,0x06,0xFE,0xC3,0xDC,0x19,0x3E,0x01,0x32,0xF1,0x20,0x2A,0x8D,0x20,0x46,0x0E,0x04,0x21,0x50,0x1D,
								0x11,0x4C,0x1D,0x1A,0xB8,0xCA,0x28,0x07,0x23,0x13,0x0D,0xC2,0x1D,0x07,0x7E,0x32,0x87,0x20,0x26,0x00,0x68,0x29,0x29,0x29,0x29,0x22,0xF2,0x20,0xCD,0x42,0x07,0xC3,0xF1,0x08,0xCD,0x42,0x07,0xC3,0x39,0x14,0x21,0x87,0x20,0xCD,0x3B,0x1A,0xC3,0x47,0x1A,0x06,0x10,0x21,0x98,0x20,0x7E,0xB0,0x77,0xCD,0x70,0x17,0x21,0x7C,0x1D,0x22,0x87,0x20,0xC3,0x3C,0x07,0x11,0x83,0x1B,0xC3,0x32,0x1A,0x3E,0x01,0x32,0x93,0x20,0x31,0x00,0x24,0xFB,0xCD,0x79,0x19,0xCD,0xD6,0x09,0x21,0x13,0x30,0x11,0xF3,0x1F,0x0E,0x04,0xCD,0xF3,0x08,0x3A,0xEB,0x20,0x3D,0x21,0x10,0x28,0x0E,0x14,0xC2,0x57,0x08,0x11,0xCF,0x1A,0xCD,0xF3,0x08,0xDB,0x01,0xE6,0x04,0xCA,0x7F,0x07,0x06,0x99,0xAF,0x32,0xCE,0x20,0x3A,0xEB,0x20,0x80,0x27,0x32,0xEB,0x20,0xCD,0x47,0x19,0x21,0x00,0x00,0x22,0xF8,0x20,0x22,0xFC,0x20,0xCD,0x25,0x19,0xCD,0x2B,0x19,0xCD,0xD7,0x19,0x21,0x01,0x01,0x7C,0x32,0xEF,0x20,0x22,0xE7,0x20,0x22,0xE5,0x20,0xCD,0x56,0x19,0xCD,0xEF,0x01,0xCD,0xF5,0x01,0xCD,0xD1,0x08,0x32,0xFF,0x21,0x32,0xFF,0x22,0xCD,0xD7,0x00,0xAF,0x32,0xFE,0x21,0x32,0xFE,0x22,0xCD,0xC0,0x01,0xCD,0x04,0x19,0x21,0x78,0x38,0x22,0xFC,0x21,0x22,0xFC,0x22,0xCD,0xE4,0x01,0xCD,0x7F,0x1A,0xCD,0x8D,0x08,0xCD,0xD6,0x09,0x00};
const unsigned char romg[2048] = {0xaf,0x32,0xc1,0x20,0xcd,0xcf,0x01,0x3a,0x67,0x20,0x0f,0xda,0x72,0x08,0xcd,0x13,0x02,0xcd,0xcf,0x01,0xcd,0xb1,0x00,0xcd,0xd1,0x19,0x06,0x20,0xcd,0xfa,0x18,0xcd,0x18,0x16,0xcd,0x0a,0x19,0xcd,0xf3,0x15,0xcd,0x88,0x09,0x3a,0x82,0x20,0xa7,0xca,0xef,0x09,0xcd,0x0e,0x17,0xcd,0x35,0x09,0xcd,0xd8,0x08,0xcd,0x2c,0x17,0xcd,0x59,0x0a,0xca,0x49,0x08,0x06,0x04,0xcd,0xfa,0x18,0xcd,0x75,0x17,0xd3,0x06,0xcd,0x04,0x18,0xc3,0x1f,0x08,0x00,0x00,0x00,0x11,0xba,0x1a,0xcd,0xf3,0x08,0x06,0x98,0xdb,0x01,0x0f,0x0f,0xda,0x6d,0x08,0x0f,0xda,0x98,0x07,0xc3,0x7f,0x07,0x3e,0x01,0xc3,0x9b,0x07,0xcd,0x1a,0x02,0xc3,0x14,0x08,0x3a,0x08,0x20,0x47,0x2a,0x09,0x20,0xeb,0xc3,0x86,0x08,0x00,0x00,0x00,0x3a,0x67,0x20,0x67,0x2e,0xfc,0xc9,0x21,0x11,0x2b,0x11,0x70,0x1b,0x0e,0x0e,0xcd,0xf3,0x08,0x3a,0x67,0x20,0x0f,0x3e,0x1c,0x21,0x11,0x37,0xd4,0xff,0x08,0x3e,0xb0,0x32,0xc0,0x20,0x3a,0xc0,0x20,0xa7,0xc8,0xe6,0x04,0xc2,0xbc,0x08,0xcd,0xca,0x09,0xcd,0x31,0x19,0xc3,0xa9,0x08,0x06,0x20,0x21,0x1c,0x27,0x3a,0x67,0x20,0x0f,0xda,0xcb,0x08,0x21,0x1c,0x39,0xcd,0xcb,0x14,0xc3,0xa9,0x08,0xdb,0x02,0xe6,0x03,0xc6,0x03,0xc9,0x3a,0x82,0x20,0xfe,0x09,0xd0,0x3e,0xfb,0x32,0x7e,0x20,0xc9,0x3a,0xce,0x20,0xa7,0xc0,0x21,0x1c,0x39,0x06,0x20,0xc3,0xcb,0x14,0x0e,0x03,0x1a,0xd5,0xcd,0xff,0x08,0xd1,0x13,0x0d,0xc2,0xf3,0x08,0xc9,0x11,0x00,0x1e,0xe5,0x26,0x00,0x6f,0x29,0x29,0x29,0x19,0xeb,0xe1,0x06,0x08,0xd3,0x06,0xc3,0x39,0x14,0x3a,0x09,0x20,0xfe,0x78,0xd0,0x2a,0x91,0x20,0x7d,0xb4,0xc2,0x29,0x09,0x21,0x00,0x06,0x3e,0x01,0x32,0x83,0x20,0x2b,0x22,0x91,0x20,0xc9,0xcd,
								0x11,0x16,0x2e,0xff,0x7e,0xc9,0xcd,0x10,0x19,0x2b,0x2b,0x7e,0xa7,0xc8,0x06,0x15,0xdb,0x02,0xe6,0x08,0xca,0x48,0x09,0x06,0x10,0xcd,0xca,0x09,0x23,0x7e,0xb8,0xd8,0xcd,0x2e,0x09,0x34,0x7e,0xf5,0x21,0x01,0x25,0x24,0x24,0x3d,0xc2,0x58,0x09,0x06,0x10,0x11,0x60,0x1c,0xcd,0x39,0x14,0xf1,0x3c,0xcd,0x8b,0x1a,0xcd,0x10,0x19,0x2b,0x2b,0x36,0x00,0x3e,0xff,0x32,0x99,0x20,0x06,0x10,0xc3,0xfa,0x18,0x21,0xa0,0x1d,0xfe,0x02,0xd8,0x23,0xfe,0x04,0xd8,0x23,0xc9,0xcd,0xca,0x09,0x3a,0xf1,0x20,0xa7,0xc8,0xaf,0x32,0xf1,0x20,0xe5,0x2a,0xf2,0x20,0xeb,0xe1,0x7e,0x83,0x27,0x77,0x5f,0x23,0x7e,0x8a,0x27,0x77,0x57,0x23,0x7e,0x23,0x66,0x6f,0xc3,0xad,0x09,0x7a,0xcd,0xb2,0x09,0x7b,0xd5,0xf5,0x0f,0x0f,0x0f,0x0f,0xe6,0x0f,0xcd,0xc5,0x09,0xf1,0xe6,0x0f,0xcd,0xc5,0x09,0xd1,0xc9,0xc6,0x1a,0xc3,0xff,0x08,0x3a,0x67,0x20,0x0f,0x21,0xf8,0x20,0xd8,0x21,0xfc,0x20,0xc9,0x21,0x02,0x24,0x36,0x00,0x23,0x7d,0xe6,0x1f,0xfe,0x1c,0xda,0xe8,0x09,0x11,0x06,0x00,0x19,0x7c,0xfe,0x40,0xda,0xd9,0x09,0xc9,0xcd,0x3c,0x0a,0xaf,0x32,0xe9,0x20,0xcd,0xd6,0x09,0x3a,0x67,0x20,0xf5,0xcd,0xe4,0x01,0xf1,0x32,0x67,0x20,0x3a,0x67,0x20,0x67,0xe5,0x2e,0xfe,0x7e,0xe6,0x07,0x3c,0x77,0x21,0xa2,0x1d,0x23,0x3d,0xc2,0x13,0x0a,0x7e,0xe1,0x2e,0xfc,0x77,0x23,0x36,0x38,0x7c,0x0f,0xda,0x33,0x0a,0x3e,0x21,0x32,0x98,0x20,0xcd,0xf5,0x01,0xcd,0x04,0x19,0xc3,0x04,0x08,0xcd,0xef,0x01,0xcd,0xc0,0x01,0xc3,0x04,0x08,0xcd,0x59,0x0a,0xc2,0x52,0x0a,0x3e,0x30,0x32,0xc0,0x20,0x3a,0xc0,0x20,0xa7,0xc8,0xcd,0x59,0x0a,0xca,0x47,0x0a,0xcd,0x59,0x0a,0xc2,0x52,0x0a,0xc9,0x3a,0x15,0x20,0xfe,0xff,
								0xc9,0x3a,0xef,0x20,0xa7,0xca,0x7c,0x0a,0x48,0x06,0x08,0xcd,0xfa,0x18,0x41,0x78,0xcd,0x7c,0x09,0x7e,0x21,0xf3,0x20,0x36,0x00,0x2b,0x77,0x2b,0x36,0x01,0x21,0x62,0x20,0xc9,0x3e,0x02,0x32,0xc1,0x20,0xd3,0x06,0x3a,0xcb,0x20,0xa7,0xca,0x85,0x0a,0xaf,0x32,0xc1,0x20,0xc9,0xd5,0x1a,0xcd,0xff,0x08,0xd1,0x3e,0x07,0x32,0xc0,0x20,0x3a,0xc0,0x20,0x3d,0xc2,0x9e,0x0a,0x13,0x0d,0xc2,0x93,0x0a,0xc9,0x21,0x50,0x20,0xc3,0x4b,0x02,0x3e,0x40,0xc3,0xd7,0x0a,0x3e,0x80,0xc3,0xd7,0x0a,0xe1,0xc3,0x72,0x00,0x3a,0xc1,0x20,0x0f,0xda,0xbb,0x0a,0x0f,0xda,0x68,0x18,0x0f,0xda,0xab,0x0a,0xc9,0x21,0x14,0x2b,0x0e,0x0f,0xc3,0x93,0x0a,0x32,0xc0,0x20,0x3a,0xc0,0x20,0xa7,0xc2,0xda,0x0a,0xc9,0x21,0xc2,0x20,0x06,0x0c,0xc3,0x32,0x1a,0xaf,0xd3,0x03,0xd3,0x05,0xcd,0x82,0x19,0xfb,0xcd,0xb1,0x0a,0x3a,0xec,0x20,0xa7,0x21,0x17,0x30,0x0e,0x04,0xc2,0xe8,0x0b,0x11,0xfa,0x1c,0xcd,0x93,0x0a,0x11,0xaf,0x1d,0xcd,0xcf,0x0a,0xcd,0xb1,0x0a,0xcd,0x15,0x18,0xcd,0xb6,0x0a,0x3a,0xec,0x20,0xa7,0xc2,0x4a,0x0b,0x11,0x95,0x1a,0xcd,0xe2,0x0a,0xcd,0x80,0x0a,0x11,0xb0,0x1b,0xcd,0xe2,0x0a,0xcd,0x80,0x0a,0xcd,0xb1,0x0a,0x11,0xc9,0x1f,0xcd,0xe2,0x0a,0xcd,0x80,0x0a,0xcd,0xb1,0x0a,0x21,0xb7,0x33,0x06,0x0a,0xcd,0xcb,0x14,0xcd,0xb6,0x0a,0xcd,0xd6,0x09,0x3a,0xff,0x21,0xa7,0xc2,0x5d,0x0b,0xcd,0xd1,0x08,0x32,0xff,0x21,0xcd,0x7f,0x1a,0xcd,0xe4,0x01,0xcd,0xc0,0x01,0xcd,0xef,0x01,0xcd,0x1a,0x02,0x3e,0x01,0x32,0xc1,0x20,0xcd,0xcf,0x01,0xcd,0x18,0x16,0xcd,0xf1,0x0b,0xd3,0x06,0xcd,0x59,0x0a,0xca,0x71,0x0b,0xaf,0x32,0x25,0x20,0xcd,0x59,0x0a,0xc2,0x83,0x0b,0xaf,0x32,0xc1,0x20,
								0xcd,0xb1,0x0a,0xcd,0x88,0x19,0x0e,0x0c,0x21,0x11,0x2c,0x11,0x90,0x1f,0xcd,0xf3,0x08,0x3a,0xec,0x20,0xfe,0x00,0xc2,0xae,0x0b,0x21,0x11,0x33,0x3e,0x02,0xcd,0xff,0x08,0x01,0x9c,0x1f,0xcd,0x56,0x18,0xcd,0x4c,0x18,0xdb,0x02,0x07,0xda,0xc3,0x0b,0x01,0xa0,0x1f,0xcd,0x3a,0x18,0xcd,0xb6,0x0a,0x3a,0xec,0x20,0xfe,0x00,0xc2,0xda,0x0b,0x11,0xd5,0x1f,0xcd,0xe2,0x0a,0xcd,0x80,0x0a,0xcd,0x9e,0x18,0x21,0xec,0x20,0x7e,0x3c,0xe6,0x01,0x77,0xcd,0xd6,0x09,0xc3,0xdf,0x18,0x11,0xab,0x1d,0xcd,0x93,0x0a,0xc3,0x0b,0x0b,0xcd,0x0a,0x19,0xc3,0x9a,0x19,0x13,0x00,0x08,0x13,0x0e,0x26,0x02,0x0e,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
const unsigned char romf[2048] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcd,0x74,0x14,0x00,0xc5,0xe5,0x1a,0xd3,0x04,0xdb,0x03,0xb6,0x77,0x23,0x13,0xaf,0xd3,0x04,0xdb,0x03,0xb6,0x77,0xe1,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0x05,0x14,0xc9,0x00,0x00,0xcd,0x74,0x14,0xc5,0xe5,0xaf,0x77,0x23,0x77,0x23,0xe1,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0x27,0x14,0xc9,0xc5,0x1a,0x77,0x13,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0x39,0x14,0xc9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcd,0x74,0x14,0xc5,0xe5,0x1a,0xd3,0x04,0xdb,0x03,0x2f,0xa6,0x77,0x23,0x13,0xaf,0xd3,0x04,0xdb,0x03,0x2f,0xa6,0x77,0xe1,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0x55,0x14,0xc9,0x7d,0xe6,0x07,0xd3,0x02,0xc3,0x47,0x1a,0xc5,0xe5,0x7e,0x12,0x13,0x23,0x0d,0xc2,0x7e,0x14,0xe1,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0x7c,0x14,0xc9,0xcd,0x74,0x14,0xaf,0x32,0x61,0x20,0xc5,0xe5,0x1a,0xd3,0x04,0xdb,0x03,0xf5,0xa6,0xca,0xa9,0x14,0x3e,0x01,0x32,0x61,0x20,0xf1,0xb6,0x77,0x23,0x13,0xaf,0xd3,0x04,0xdb,0x03,0xf5,0xa6,0xca,0xbd,0x14,0x3e,0x01,0x32,0x61,
								0x20,0xf1,0xb6,0x77,0xe1,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0x98,0x14,0xc9,0xaf,0xc5,0x77,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0xcc,0x14,0xc9,0x3a,0x25,0x20,0xfe,0x05,0xc8,0xfe,0x02,0xc0,0x3a,0x29,0x20,0xfe,0xd8,0x47,0xd2,0x30,0x15,0x3a,0x02,0x20,0xa7,0xc8,0x78,0xfe,0xce,0xd2,0x79,0x15,0xc6,0x06,0x47,0x3a,0x09,0x20,0xfe,0x90,0xd2,0x04,0x15,0xb8,0xd2,0x30,0x15,0x68,0xcd,0x62,0x15,0x3a,0x2a,0x20,0x67,0xcd,0x6f,0x15,0x22,0x64,0x20,0x3e,0x05,0x32,0x25,0x20,0xcd,0x81,0x15,0x7e,0xa7,0xca,0x30,0x15,0x36,0x00,0xcd,0x5f,0x0a,0xcd,0x3b,0x1a,0xcd,0xd3,0x15,0x3e,0x10,0x32,0x03,0x20,0xc9,0x3e,0x03,0x32,0x25,0x20,0xc3,0x4a,0x15,0x21,0x03,0x20,0x35,0xc0,0x2a,0x64,0x20,0x06,0x10,0xcd,0x24,0x14,0x3e,0x04,0x32,0x25,0x20,0xaf,0x32,0x02,0x20,0x06,0xf7,0xc3,0xdc,0x19,0x00,0x0e,0x00,0xbc,0xd4,0x90,0x15,0xbc,0xd0,0xc6,0x10,0x0c,0xc3,0x5a,0x15,0x3a,0x09,0x20,0x65,0xcd,0x54,0x15,0x41,0x05,0xde,0x10,0x6f,0xc9,0x3a,0x0a,0x20,0xcd,0x54,0x15,0xde,0x10,0x67,0xc9,0x3e,0x01,0x32,0x85,0x20,0xc3,0x45,0x15,0x78,0x07,0x07,0x07,0x80,0x80,0x80,0x81,0x3d,0x6f,0x3a,0x67,0x20,0x67,0xc9,0x0c,0xc6,0x10,0xfa,0x90,0x15,0xc9,0x3a,0x0d,0x20,0xa7,0xc2,0xb7,0x15,0x21,0xa4,0x3e,0xcd,0xc5,0x15,0xd0,0x06,0xfe,0x3e,0x01,0x32,0x0d,0x20,0x78,0x32,0x08,0x20,0x3a,0x0e,0x20,0x32,0x07,0x20,0xc9,0x21,0x24,0x25,0xcd,0xc5,0x15,0xd0,0xcd,0xf1,0x18,0xaf,0xc3,0xa9,0x15,0x06,0x17,0x7e,0xa7,0xc2,0x6b,0x16,0x23,0x05,0xc2,0xc7,0x15,0xc9,0x00,0xcd,0x74,0x14,0xe5,0xc5,0xe5,0x1a,0xd3,0x04,0xdb,0x03,0x77,0x23,0x13,0xaf,0xd3,0x04,0xdb,0x03,0x77,0xe1,0x01,0x20,0x00,
								0x09,0xc1,0x05,0xc2,0xd7,0x15,0xe1,0xc9,0xcd,0x11,0x16,0x01,0x00,0x37,0x7e,0xa7,0xca,0xff,0x15,0x0c,0x23,0x05,0xc2,0xf9,0x15,0x79,0x32,0x82,0x20,0xfe,0x01,0xc0,0x21,0x6b,0x20,0x36,0x01,0xc9,0x2e,0x00,0x3a,0x67,0x20,0x67,0xc9,0x3a,0x15,0x20,0xfe,0xff,0xc0,0x21,0x10,0x20,0x7e,0x23,0x46,0xb0,0xc0,0x3a,0x25,0x20,0xa7,0xc0,0x3a,0xef,0x20,0xa7,0xca,0x52,0x16,0x3a,0x2d,0x20,0xa7,0xc2,0x48,0x16,0xcd,0xc0,0x17,0xe6,0x10,0xc8,0x3e,0x01,0x32,0x25,0x20,0x32,0x2d,0x20,0xc9,0xcd,0xc0,0x17,0xe6,0x10,0xc0,0x32,0x2d,0x20,0xc9,0x21,0x25,0x20,0x36,0x01,0x2a,0xed,0x20,0x23,0x7d,0xfe,0x7e,0xda,0x63,0x16,0x2e,0x74,0x22,0xed,0x20,0x7e,0x32,0x1d,0x20,0xc9,0x37,0xc9,0xaf,0xcd,0x8b,0x1a,0xcd,0x10,0x19,0x36,0x00,0xcd,0xca,0x09,0x23,0x11,0xf5,0x20,0x1a,0xbe,0x1b,0x2b,0x1a,0xca,0x8b,0x16,0xd2,0x98,0x16,0xc3,0x8f,0x16,0xbe,0xd2,0x98,0x16,0x7e,0x12,0x13,0x23,0x7e,0x12,0xcd,0x50,0x19,0x3a,0xce,0x20,0xa7,0xca,0xc9,0x16,0x21,0x03,0x28,0x11,0xa6,0x1a,0x0e,0x14,0xcd,0x93,0x0a,0x25,0x25,0x06,0x1b,0x3a,0x67,0x20,0x0f,0xda,0xb7,0x16,0x06,0x1c,0x78,0xcd,0xff,0x08,0xcd,0xb1,0x0a,0xcd,0xe7,0x18,0x7e,0xa7,0xca,0xc9,0x16,0xc3,0xed,0x02,0x21,0x18,0x2d,0x11,0xa6,0x1a,0x0e,0x0a,0xcd,0x93,0x0a,0xcd,0xb6,0x0a,0xcd,0xd6,0x09,0xaf,0x32,0xef,0x20,0xd3,0x05,0xcd,0xd1,0x19,0xc3,0x89,0x0b,0x31,0x00,0x24,0xfb,0xaf,0x32,0x15,0x20,0xcd,0xd8,0x14,0x06,0x04,0xcd,0xfa,0x18,0xcd,0x59,0x0a,0xc2,0xee,0x16,0xcd,0xd7,0x19,0x21,0x01,0x27,0xcd,0xfa,0x19,0xaf,0xcd,0x8b,0x1a,0x06,0xfb,0xc3,0x6b,0x19,0xcd,0xca,0x09,0x23,0x7e,0x11,0xb8,0x1c,0x21,0xa1,0x1a,0x0e,
								0x04,0x47,0x1a,0xb8,0xd2,0x27,0x17,0x23,0x13,0x0d,0xc2,0x1c,0x17,0x7e,0x32,0xcf,0x20,0xc9,0x3a,0x25,0x20,0xfe,0x00,0xc2,0x39,0x17,0x06,0xfd,0xc3,0xdc,0x19,0x06,0x02,0xc3,0xfa,0x18,0x00,0x00,0x21,0x9b,0x20,0x35,0xcc,0x6d,0x17,0x3a,0x68,0x20,0xa7,0xca,0x6d,0x17,0x21,0x96,0x20,0x35,0xc0,0x21,0x98,0x20,0x7e,0xd3,0x05,0x3a,0x82,0x20,0xa7,0xca,0x6d,0x17,0x2b,0x7e,0x2b,0x77,0x2b,0x36,0x01,0x3e,0x04,0x32,0x9b,0x20,0xc9,0x3a,0x98,0x20,0xe6,0x30,0xd3,0x05,0xc9,0x3a,0x95,0x20,0xa7,0xca,0xaa,0x17,0x21,0x11,0x1a,0x11,0x21,0x1a,0x3a,0x82,0x20,0xbe,0xd2,0x8e,0x17,0x23,0x13,0xc3,0x85,0x17,0x1a,0x32,0x97,0x20,0x21,0x98,0x20,0x7e,0xe6,0x30,0x47,0x7e,0xe6,0x0f,0x07,0xfe,0x10,0xc2,0xa4,0x17,0x3e,0x01,0xb0,0x77,0xaf,0x32,0x95,0x20,0x21,0x99,0x20,0x35,0xc0,0x06,0xef,0xc3,0xdc,0x19,0x06,0xef,0x21,0x98,0x20,0x7e,0xa0,0x77,0xd3,0x05,0xc9,0x00,0x3a,0x67,0x20,0x0f,0xd2,0xca,0x17,0xdb,0x01,0xc9,0xdb,0x02,0xc9,0xdb,0x02,0xe6,0x04,0xc8,0x3a,0x9a,0x20,0xa7,0xc0,0x31,0x00,0x24,0x06,0x04,0xcd,0xd6,0x09,0x05,0xc2,0xdc,0x17,0x3e,0x01,0x32,0x9a,0x20,0xcd,0xd7,0x19,0xfb,0x11,0xbc,0x1c,0x21,0x16,0x30,0x0e,0x04,0xcd,0x93,0x0a,0xcd,0xb1,0x0a,0xaf,0x32,0x9a,0x20,0x32,0x93};
const unsigned char rome[2048] = {0x20,0xc3,0xc9,0x16,0x21,0x84,0x20,0x7e,0xa7,0xca,0x07,0x07,0x23,0x7e,0xa7,0xc0,0x06,0x01,0xc3,0xfa,0x18,0x21,0x10,0x28,0x11,0xa3,0x1c,0x0e,0x15,0xcd,0xf3,0x08,0x3e,0x0a,0x32,0x6c,0x20,0x01,0xbe,0x1d,0xcd,0x56,0x18,0xda,0x37,0x18,0xcd,0x44,0x18,0xc3,0x28,0x18,0xcd,0xb1,0x0a,0x01,0xcf,0x1d,0xcd,0x56,0x18,0xd8,0xcd,0x4c,0x18,0xc3,0x3a,0x18,0xc5,0x06,0x10,0xcd,0x39,0x14,0xc1,0xc9,0xc5,0x3a,0x6c,0x20,0x4f,0xcd,0x93,0x0a,0xc1,0xc9,0x0a,0xfe,0xff,0x37,0xc8,0x6f,0x03,0x0a,0x67,0x03,0x0a,0x5f,0x03,0x0a,0x57,0x03,0xa7,0xc9,0x21,0xc2,0x20,0x34,0x23,0x4e,0xcd,0xd9,0x01,0x47,0x3a,0xca,0x20,0xb8,0xca,0x98,0x18,0x3a,0xc2,0x20,0xe6,0x04,0x2a,0xcc,0x20,0xc2,0x88,0x18,0x11,0x30,0x00,0x19,0x22,0xc7,0x20,0x21,0xc5,0x20,0xcd,0x3b,0x1a,0xeb,0xc3,0xd3,0x15,0x00,0x00,0x00,0x3e,0x01,0x32,0xcb,0x20,0xc9,0x21,0x50,0x20,0x11,0xc0,0x1b,0x06,0x10,0xcd,0x32,0x1a,0x3e,0x02,0x32,0x80,0x20,0x3e,0xff,0x32,0x7e,0x20,0x3e,0x04,0x32,0xc1,0x20,0x3a,0x55,0x20,0xe6,0x01,0xca,0xb8,0x18,0x3a,0x55,0x20,0xe6,0x01,0xc2,0xc0,0x18,0x21,0x11,0x33,0x3e,0x26,0x00,0xcd,0xff,0x08,0xc3,0xb6,0x0a,0x31,0x00,0x24,0x06,0x00,0xcd,0xe6,0x01,0xcd,0x56,0x19,0x3e,0x08,0x32,0xcf,0x20,0xc3,0xea,0x0a,0x3a,0x67,0x20,0x21,0xe7,0x20,0x0f,0xd0,0x23,0xc9,0x06,0x02,0x3a,0x82,0x20,0x3d,0xc0,0x04,0xc9,0x3a,0x94,0x20,0xb0,0x32,0x94,0x20,0xd3,0x03,0xc9,0x21,0x00,0x22,0xc3,0xc3,0x01,0xcd,0xd8,0x14,0xc3,0x97,0x15,0x21,0xe7,0x20,0x3a,0x67,0x20,0x0f,0xd8,0x23,0xc9,0x0e,0x1c,0x21,0x1e,0x24,0x11,0xe4,0x1a,0xc3,0xf3,0x08,0x21,0xf8,0x20,0xc3,0x31,0x19,0x21,0xfc,0x20,0xc3,
                                    0x31,0x19,0x5e,0x23,0x56,0x23,0x7e,0x23,0x66,0x6f,0xc3,0xad,0x09,0x0e,0x07,0x21,0x01,0x35,0x11,0xa9,0x1f,0xc3,0xf3,0x08,0x3a,0xeb,0x20,0x21,0x01,0x3c,0xc3,0xb2,0x09,0x21,0xf4,0x20,0xc3,0x31,0x19,0xcd,0x5c,0x1a,0xcd,0x1a,0x19,0xcd,0x25,0x19,0xcd,0x2b,0x19,0xcd,0x50,0x19,0xcd,0x3c,0x19,0xc3,0x47,0x19,0xcd,0xdc,0x19,0xc3,0x71,0x16,0x3e,0x01,0x32,0x6d,0x20,0xc3,0xe6,0x16,0xcd,0xd7,0x19,0xcd,0x47,0x19,0xc3,0x3c,0x19,0x32,0xc1,0x20,0xc9,0x8b,0x19,0xc3,0xd6,0x09,0x21,0x03,0x28,0x11,0xbe,0x19,0x0e,0x13,0xc3,0xf3,0x08,0x00,0x00,0x00,0x00,0x3a,0x1e,0x20,0xa7,0xc2,0xac,0x19,0xdb,0x01,0xe6,0x76,0xd6,0x72,0xc0,0x3c,0x32,0x1e,0x20,0xdb,0x01,0xe6,0x76,0xfe,0x34,0xc0,0x21,0x1b,0x2e,0x11,0xf7,0x0b,0x0e,0x09,0xc3,0xf3,0x08,0x28,0x13,0x00,0x08,0x13,0x0e,0x26,0x02,0x0e,0x11,0x0f,0x0e,0x11,0x00,0x13,0x08,0x0e,0x0d,0x28,0x3e,0x01,0x32,0xe9,0x20,0xc9,0xaf,0xc3,0xd3,0x19,0x00,0x3a,0x94,0x20,0xa0,0x32,0x94,0x20,0xd3,0x03,0xc9,0x21,0x01,0x27,0xca,0xfa,0x19,0x11,0x60,0x1c,0x06,0x10,0x4f,0xcd,0x39,0x14,0x79,0x3d,0xc2,0xec,0x19,0x06,0x10,0xcd,0xcb,0x14,0x7c,0xfe,0x35,0xc2,0xfa,0x19,0xc9,0x21,0x72,0x20,0x46,0x1a,0xe6,0x80,0xa8,0xc0,0x37,0xc9,0x32,0x2b,0x24,0x1c,0x16,0x11,0x0d,0x0a,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x34,0x2e,0x27,0x22,0x1c,0x18,0x15,0x13,0x10,0x0e,0x0d,0x0c,0x0b,0x09,0x07,0x05,0xff,0x1a,0x77,0x23,0x13,0x05,0xc2,0x32,0x1a,0xc9,0x5e,0x23,0x56,0x23,0x7e,0x23,0x4e,0x23,0x46,0x61,0x6f,0xc9,0xc5,0x06,0x03,0x7c,0x1f,0x67,0x7d,0x1f,0x6f,0x05,0xc2,0x4a,0x1a,0x7c,0xe6,0x3f,0xf6,0x20,0x67,0xc1,0xc9,0x21,0x00,
                                    0x24,0x36,0x00,0x23,0x7c,0xfe,0x40,0xc2,0x5f,0x1a,0xc9,0xc5,0xe5,0x1a,0xb6,0x77,0x13,0x23,0x0d,0xc2,0x6b,0x1a,0xe1,0x01,0x20,0x00,0x09,0xc1,0x05,0xc2,0x69,0x1a,0xc9,0xcd,0x2e,0x09,0xa7,0xc8,0xf5,0x3d,0x77,0xcd,0xe6,0x19,0xf1,0x21,0x01,0x25,0xe6,0x0f,0xc3,0xc5,0x09,0x00,0x00,0x00,0x00,0xff,0xb8,0xfe,0x20,0x1c,0x10,0x9e,0x00,0x20,0x1c,0x30,0x10,0x0b,0x08,0x07,0x06,0x00,0x0c,0x04,0x26,0x0e,0x15,0x04,0x11,0x26,0x26,0x0f,0x0b,0x00,0x18,0x04,0x11,0x24,0x26,0x25,0x1b,0x26,0x0e,0x11,0x26,0x1c,0x0f,0x0b,0x00,0x18,0x04,0x11,0x12,0x26,0x01,0x14,0x13,0x13,0x0e,0x0d,0x26,0x0e,0x0d,0x0b,0x18,0x26,0x1b,0x0f,0x0b,0x00,0x18,0x04,0x11,0x26,0x26,0x01,0x14,0x13,0x13,0x0e,0x0d,0x26,0x26,0x12,0x02,0x0e,0x11,0x04,0x24,0x1b,0x25,0x26,0x07,0x08,0x3f,0x12,0x02,0x0e,0x11,0x04,0x26,0x12,0x02,0x0e,0x11,0x04,0x24,0x1c,0x25,0x26,0x01,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x02,0x78,0x38,0x78,0x38,0x00,0xf8,0x00,0x00,0x80,0x00,0x8e,0x02,0xff,0x05,0x0c,0x60,0x1c,0x20,0x30,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0xbb,0x03,0x00,0x10,0x90,0x1c,0x28,0x30,0x01,0x04,0x00,0xff,0xff,0x00,0x00,0x02,0x76,0x04,0x00,0x00,0x00,0x00,0x00,0x04,0xee,0x1c,0x00,0x00,0x03,0x00,0x00,0x00,0xb6,0x04,0x00,0x00,0x01,0x00,0x1d,0x04,0xe2,0x1c,0x00,0x00,0x03,0x00,0x00,0x00,0x82,0x06,0x00,0x00,0x01,0x06,0x1d,0x04,0xd0,0x1c,0x00,0x00,0x03,0xff,0x00,0xc0,0x1c,0x00,0x00,0x10,0x21,0x01,0x00,0x30,0x00,0x12,0x00,0x00,0x00,0x0f,0x0b,0x00,0x18,0x26,0x0f,0x0b,0x00,0x18,0x04,0x11,0x24,0x1b,0x25,0xfc,0x00,0x01,0xff,0xff,0x00,0x00,0x00,0x20,0x64,0x1d,0xd0,0x29,0x18,0x02,
                                    0x54,0x1d,0x00,0x08,0x00,0x06,0x00,0x00,0x01,0x40,0x00,0x01,0x00,0x00,0x10,0x9e,0x00,0x20,0x1c,0x00,0x03,0x04,0x78,0x14,0x13,0x08,0x1a,0x3d,0x68,0xfc,0xfc,0x68,0x3d,0x1a,0x00,0x00,0x00,0x01,0xb8,0x98,0xa0,0x1b,0x10,0xff,0x00,0xa0,0x1b,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x0e,0x05,0x00,0x00,0x00,0x00,0x00,0x07,0xd0,0x1c,0xc8,0x9b,0x03,0x00,0x00,0x03,0x04,0x78,0x14,0x0b,0x19,0x3a,0x6d,0xfa,0xfa,0x6d,0x3a,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x74,0x1f,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x1c,0x2f,0x00,0x00,0x1c,0x27,0x00,0x00,0x1c,0x39,0x00,0x00,0x39,0x79,0x7a,0x6e,0xec,0xfa,0xfa,0xec,0x6e,0x7a,0x79,0x39,0x00,0x00,0x00,0x00,0x00,0x78,0x1d,0xbe,0x6c,0x3c,0x3c,0x3c,0x6c,0xbe,0x1d,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x3a,0x6d,0xfa,0xfa,0x6d,0x3a,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x7a,0x7f,0x6d,0xec,0xfa,0xfa,0xec,0x6d,0x7f,0x7a,0x38,0x00,0x00,0x00,0x00,0x00,0x0e,0x18,0xbe,0x6d,0x3d,0x3c,0x3d,0x6d,0xbe,0x18,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,0x3d,0x68,0xfc,0xfc,0x68,0x3d,0x1a,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x1f,0x1f,0x1f,0x1f,0x7f,0xff,0x7f,0x1f,0x1f,0x1f,0x1f,0x0f,0x00,0x00,0x04,0x01,0x13,0x03,0x07,0xb3,0x0f,0x2f,0x03,0x2f,0x49,0x04,0x03,0x00,0x01,0x40,0x08,0x05,0xa3,0x0a,0x03,0x5b,0x0f,0x27,0x27,0x0b,0x4b,0x40,0x84,0x11,0x48,0x0f,0x99,0x3c,0x7e,0x3d,0xbc,0x3e,0x7c,0x99,0x27,0x1b,0x1a,0x26,0x0f,0x0e,0x08,0x0d,0x13,0x12,0x28,0x12,0x02,0x0e,0x11,0x04,0x26,0x00,0x03,0x15,0x00,0x0d,0x02,0x04,0x26,0x13,0x00,0x01,0x0b,0x04,0x28,0x02,0x10,0x20,0x30,
                                    0x13,0x08,0x0b,0x13,0x00,0x08,0x49,0x22,0x14,0x81,0x42,0x00,0x42,0x81,0x14,0x22,0x49,0x08,0x00,0x00,0x44,0xaa,0x10,0x88,0x54,0x22,0x10,0xaa,0x44,0x22,0x54,0x88,0x4a,0x15,0xbe,0x3f,0x5e,0x25,0x04,0xfc,0x04,0x10,0xfc,0x10,0x20,0xfc,0x20,0x80,0xfc,0x80,0x00,0xfe,0x00,0x24,0xfe,0x12,0x00,0xfe,0x00,0x48,0xfe,0x90,0x0f,0x0b,0x00,0x29,0x00,0x00,0x01,0x07,0x01,0x01,0x01,0x04,0x0b,0x01,0x06,0x03,0x01,0x01,0x0b,0x09,0x02,0x08,0x02,0x0b,0x04,0x07,0x0a,0x05,0x02,0x05,0x04,0x06,0x07,0x08,0x0a,0x06,0x0a,0x03,0xff,0x0f,0xff,0x1f,0xff,0x3f,0xff,0x7f,0xff,0xff,0xfc,0xff,0xf8,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf8,0xff,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0xff,0x3f,0xff,0x1f,0xff,0x0f,0x05,0x10,0x15,0x30,0x94,0x97,0x9a,0x9d,0x10,0x05,0x05,0x10,0x15,0x10,0x10,0x05,0x30,0x10,0x10,0x10,0x05,0x15,0x10,0x05,0x00,0x00,0x00,0x00,0x04,0x0c,0x1e,0x37,0x3e,0x7c,0x74,0x7e,0x7e,0x74,0x7c,0x3e,0x37,0x1e,0x0c,0x04,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0xa5,0x40,0x08,0x98,0x3d,0xb6,0x3c,0x36,0x1d,0x10,0x48,0x62,0xb6,0x1d,0x98,0x08,0x42,0x90,0x08,0x00,0x00,0x26,0x1f,0x1a,0x1b,0x1a,0x1a,0x1b,0x1f,0x1a,0x1d,0x1a,0x1a,0x10,0x20,0x30,0x60,0x50,0x48,0x48,0x48,0x40,0x40,0x40,0x0f,0x0b,0x00,0x18,0x12,0x0f,0x00,0x02,0x04,0x26,0x26,0x08,0x0d,0x15,0x00,0x03,0x04,0x11,0x12,0x0e,0x2c,0x68,0x1d,0x0c,0x2c,0x20,0x1c,0x0a,0x2c,0x40,0x1c,0x08,0x2c,0x00,0x1c,0xff,0x0e,0x2e,0xe0,0x1d,0x0c,0x2e,0xea,0x1d,0x0a,0x2e,0xf4,0x1d,0x08,0x2e,0x99,0x1c,0xff,0x27,0x38,0x26,0x0c,0x18,0x12,0x13,0x04,0x11,0x18,0x27,
                                    0x1d,0x1a,0x26,0x0f,0x0e,0x08,0x0d,0x13,0x12,0x27,0x1c,0x1a,0x26,0x0f,0x0e,0x08,0x0d,0x13,0x12,0x00,0x00,0x00,0x1f,0x24,0x44,0x24,0x1f,0x00,0x00,0x00,0x7f,0x49,0x49,0x49,0x36,0x00,0x00,0x00,0x3e,0x41,0x41,0x41,0x22,0x00,0x00,0x00,0x7f,0x41,0x41,0x41,0x3e,0x00,0x00,0x00,0x7f,0x49,0x49,0x49,0x41,0x00,0x00,0x00,0x7f,0x48,0x48,0x48,0x40,0x00,0x00,0x00,0x3e,0x41,0x41,0x45,0x47,0x00,0x00,0x00,0x7f,0x08,0x08,0x08,0x7f,0x00,0x00,0x00,0x00,0x41,0x7f,0x41,0x00,0x00,0x00,0x00,0x02,0x01,0x01,0x01,0x7e,0x00,0x00,0x00,0x7f,0x08,0x14,0x22,0x41,0x00,0x00,0x00,0x7f,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x7f,0x20,0x18,0x20,0x7f,0x00,0x00,0x00,0x7f,0x10,0x08,0x04,0x7f,0x00,0x00,0x00,0x3e,0x41,0x41,0x41,0x3e,0x00,0x00,0x00,0x7f,0x48,0x48,0x48,0x30,0x00,0x00,0x00,0x3e,0x41,0x45,0x42,0x3d,0x00,0x00,0x00,0x7f,0x48,0x4c,0x4a,0x31,0x00,0x00,0x00,0x32,0x49,0x49,0x49,0x26,0x00,0x00,0x00,0x40,0x40,0x7f,0x40,0x40,0x00,0x00,0x00,0x7e,0x01,0x01,0x01,0x7e,0x00,0x00,0x00,0x7c,0x02,0x01,0x02,0x7c,0x00,0x00,0x00,0x7f,0x02,0x0c,0x02,0x7f,0x00,0x00,0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00,0x00,0x60,0x10,0x0f,0x10,0x60,0x00,0x00,0x00,0x43,0x45,0x49,0x51,0x61,0x00,0x00,0x00,0x3e,0x45,0x49,0x51,0x3e,0x00,0x00,0x00,0x00,0x21,0x7f,0x01,0x00,0x00,0x00,0x00,0x23,0x45,0x49,0x49,0x31,0x00,0x00,0x00,0x42,0x41,0x49,0x59,0x66,0x00,0x00,0x00,0x0c,0x14,0x24,0x7f,0x04,0x00,0x00,0x00,0x72,0x51,0x51,0x51,0x4e,0x00,0x00,0x00,0x1e,0x29,0x49,0x49,0x46,0x00,0x00,0x00,0x40,0x47,0x48,0x50,0x60,0x00,0x00,0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00,0x00,0x31,
                                    0x49,0x49,0x4a,0x3c,0x00,0x00,0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00,0x00,0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00,0x00,0x22,0x14,0x7f,0x14,0x22,0x00,0x00,0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00,0x24,0x1b,0x26,0x0e,0x11,0x26,0x1c,0x26,0x0f,0x0b,0x00,0x18,0x04,0x11,0x12,0x25,0x26,0x26,0x28,0x1b,0x26,0x0f,0x0b,0x00,0x18,0x04,0x11,0x26,0x26,0x1b,0x26,0x02,0x0e,0x08,0x0d,0x26,0x01,0x01,0x00,0x00,0x01,0x00,0x02,0x01,0x00,0x02,0x01,0x00,0x60,0x10,0x0f,0x10,0x60,0x30,0x18,0x1a,0x3d,0x68,0xfc,0xfc,0x68,0x3d,0x1a,0x00,0x08,0x0d,0x12,0x04,0x11,0x13,0x26,0x26,0x02,0x0e,0x08,0x0d,0x0d,0x2a,0x50,0x1f,0x0a,0x2a,0x62,0x1f,0x07,0x2a,0xe1,0x1f,0xff,0x02,0x11,0x04,0x03,0x08,0x13,0x26,0x00,0x60,0x10,0x0f,0x10,0x60,0x38,0x19,0x3a,0x6d,0xfa,0xfa,0x6d,0x3a,0x19,0x00,0x00,0x20,0x40,0x4d,0x50,0x20,0x00,0x00,0x00,0x00,0x00,0xff,0xb8,0xff,0x80,0x1f,0x10,0x97,0x00,0x80,0x1f,0x00,0x00,0x01,0xd0,0x22,0x20,0x1c,0x10,0x94,0x00,0x20,0x1c,0x28,0x1c,0x26,0x0f,0x0b,0x00,0x18,0x04,0x11,0x12,0x26,0x1c,0x26,0x02,0x0e,0x08,0x0d,0x12,0x0f,0x14,0x12,0x07,0x26,0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00};

si8080::si8080() {
	debug = false;

	pc = 0x0;	
	sp = 0x0;	

	pixels = new uint32_t[256 * 224 * 8]; 

	for(int x = 0; x < 224; x++) { 
		for(int y = 0; y < 256*8; y++) { //2400, 2401.. bottom left to upper left then next row
			if(y > 240) {
				if(x < 16) {
					pixels[(y*224) + x] = 0xFFFFFFFF; //white 
				}
				else if(x < 118) {
					pixels[(y*224) + x] = 0x00FF00FF; //green
				}
				else if(x < 224) {
					pixels[(y*224) + x] = 0xFFFFFFFF; //white
				}
			}
			else if(y > 184) {
				pixels[(y*224) + x] = 0x00FF00FF; //green
			}
			else if(y > 64) {
				pixels[(y*224) + x] = 0xFFFFFFFF; //white
			}
			else if(y > 32) {
				pixels[(y*224) + x] = 0xFF0000FF; //red
			}
			else if(y > 0) {
				pixels[(y*224) + x] = 0xFFFFFFFF; //white
			}
		}
	}

	for(int i = 0; i < 0x4000 * 2; i++)
		memory[i] = 0;	

	for(int i = 0; i < 2048; i++) {
		memory[i] 			 = romh[i];
		memory[i + 2048] 	 = romg[i];
		memory[i + (2048*2)] = romf[i];
		memory[i + (2048*3)] = rome[i];
	}

	drawFlag = true;
}

void si8080::emulateCycle() {	
	uint8_t opcode = memory[pc];

	if(debug) {
		cout << "Opcode: ";
		cout << hex << +opcode << endl;

		cout << "PC: ";
		cout << hex << setw(4) << +pc;
		cout << "\tSP: ";
		cout << setw(4) << +sp;
		cout << "\tA: ";
		cout << +a;
		cout << "\tB: ";
		cout << +b;
		cout << "\tC: ";
		cout << +c;
		cout << "\tD: ";
		cout << +d;
		cout << "\tE: ";
		cout << +e;
		cout << "\tH: ";
		cout << +h;
		cout << "\tL: ";
		cout << +l << endl;

		
		cout << "\tCarry: ";
		cout << +cy;
		cout << "\tAux Carry: ";
		cout << +ac;
		cout << "\tSign: ";
		cout << +s;
		cout << "\tZero: ";
		cout << +z;
		cout << "\tParity: ";
		cout << +p << endl;
	}

	switch(opcode) {
		case 0x00: //NOP
			break;

		case 0x01: //LXI B,D16
			c = memory[pc+1];
			b = memory[pc+2];	
			pc += 2;	
			break;

		case 0x02: //STAX B
			memory[((uint16_t) b << 8) + c] = a;
			break;
			
		case 0x03: //INX B
		{
			uint16_t tmp = ((uint16_t) b << 8) + (c + 1);
			c = (tmp & 0xff);
			b = (tmp >> 8);
		}
			break;
			
		case 0x04: //INR B
			b = setCond8(b + 1, b, 1, 0x4);
			break;
			
		case 0x05: //DCR B
			b = setCond8(b - 1, b, 1, 0x4);	
			break;

		case 0x06: //MVI B, D8
			b = memory[pc+1];
			pc += 1;	
			break;
			
		case 0x07: //RLC
			if((a & 0x80) == 0x80) {
				cy = 1;
				a = (a << 1) + 0x1; 
			}
			else {
				cy = 0;
				a = (a << 1);
			}
			break;
			
		case 0x09: //DAD B
		{
			uint32_t tmp = ((h << 8) + l) + ((b << 8) + c);
			h = (tmp & 0xff00) >> 8;
			l = tmp & 0xff;

			cy = (tmp > 0xffff);
			
		}
			break;
			
		case 0x0a: //LDAX B
			a = memory[(b << 8) + c];
			break;
			
		case 0x0b: //DCX B
			{
				uint16_t tmp = ((uint16_t) b << 8) + c - 1;
				c = (tmp & 0xff);
				b = (tmp >> 8);
			}
			break;
			
		case 0x0c: //INR C
			c = setCond8(c + 1, 1, c, 0x4);	
			break;
			
		case 0x0d: //DCR C
			c = setCond8(c - 1, c, 1, 0x4);	
			break;
			
		case 0x0e: //MVI C,D8
			c = memory[pc+1];
			pc += 1;	
			break;
			
		case 0x0f: //RRC
			if((a & 0x1) == 0x1) {
				cy = 1;
				a = (a >> 1) + 0x80; 
			}
			else {
				cy = 0;
				a = (a >> 1);
			}
			break;

		case 0x11: //LXI D,D16
			e = memory[pc+1];
			d = memory[pc+2];	
			pc += 2;
			break;

		case 0x12: //STAX D
			memory[(d << 8) + e] = a;
			break;

		case 0x13: //INX D
		{
			uint16_t tmp = ((uint16_t) d << 8) + e + 1;
			e = (tmp & 0xff);
			d = (tmp >> 8);
		}
			break;

		case 0x14: //INR D
			d = setCond8(d + 1, d, 1, 0x4);
			break;

		case 0x15: //DCR D
			d= setCond8(d - 1, d, 1, 0x4);
			break;

		case 0x16: //not done
			pc += 1;
			break;

		case 0x17: //not done
			break;

		//this isn't setting the carry right, need to make a new function specifically for these kind of instructions
		case 0x19: //DAD D
		{
			uint32_t tmp = ((h << 8) + l) + ((d << 8) + e);
			h = (tmp & 0xff00) >> 8;
			l = tmp & 0xff;

			cy = (tmp > 0xffff);
		}
			break;

		case 0x1a: //LDAX D
			a = memory[(d << 8) + e];
			break;

		case 0x1b: //not done
			break;

		case 0x1c: //not done
			break;

		case 0x1d: //not done
			break;

		case 0x1e: //not done
			pc += 1;
			break;

		case 0x1f: //not done
			break;

		case 0x21: //LXI H,D16
			l = memory[pc+1];
			h = memory[pc+2];
			pc += 2;
			break;

		case 0x22: //not done
			pc += 2;
			break;

		case 0x23: //INX H
		{
			uint16_t tmp = ((uint16_t) h << 8) + l + 1;
			l = (tmp & 0xff);
			h = (tmp >> 8);
		}
			break;

		case 0x24: //not done
			break;

		case 0x25: //not done
			break;

		case 0x26: //MVI H,D8
			h = memory[pc+1];
			pc += 1;
			break;

		case 0x27: //wolfy don't even dare to fucking attempt this one lmao (it's not needed and I'll do it later)
			break;

		case 0x29: //DAD H
		{
			uint32_t tmp = ((h << 8) + l) << 1;
			h = (tmp & 0xff00) >> 8;
			l = tmp & 0xff;

			cy = (tmp > 0xffff);
		}
			break;

		case 0x2a: //not done
			pc += 2;
			break;

		case 0x2b: //not done
			break;

		case 0x2c: //not done
			break;

		case 0x2d: //not done
			break;

		case 0x2e: //not done
			pc += 1;
			break;

		case 0x2f: //not done
			break;

		case 0x31: //LXI SP,D16
			sp = (((uint16_t) memory[pc+2] << 8) + memory[pc+1]);
			pc += 2;
			break;

		case 0x32: //STA adr
			memory[(((uint16_t)memory[pc+2] << 8) + memory[pc+1])] = a;
			pc += 2;
			break;

		case 0x33: //INX SP
			sp += 1;
			break;

		case 0x34: //not done
			break;

		case 0x35: //not done
			break;

		case 0x36: //MVI M,D8
		{
			int loc = (((uint16_t) h << 8) + l);

			//cout << hex << loc << endl;
			if((loc >= 0x2400 && loc < 0x4000) || (loc >= 0x6400 && loc < 0x8000))
				vramChange(memory[pc+1]);
			
			memory[loc] = memory[pc+1];
			
			pc += 1;
		}
			break;

		case 0x37: //not done
			break;

		case 0x39: //not done
			break;

		case 0x3a: //LDA adr
			a = memory[(((uint16_t)memory[pc+2] << 8) + memory[pc+1])];
			pc += 2;
			break;

		case 0x3b: //DCX SP
			sp -= 1;
			break;

		case 0x3c: //not done
			break;

		case 0x3d: //not done
			break;

		case 0x3e: //MVI A,D8
			a = memory[pc+1];
			pc += 1;
			break;

		case 0x3f: //not done
			break;

		case 0x40: //MOV B,B
			break;

		case 0x41: //not done
			break;

		case 0x42: //not done
			break;

		case 0x43: //not done
			break;

		case 0x44: //not done
			break;

		case 0x45: //not done
			break;

		case 0x46: //not done
			break;

		case 0x47: //not done
			break;

		case 0x48: //not done
			break;

		case 0x49: //not done
			break;

		case 0x4a: //not done
			break;

		case 0x4b: //not done
			break;

		case 0x4c: //not done
			break;

		case 0x4d: //not done
			break;

		case 0x4e: //not done
			break;

		case 0x4f: //not done
			break;

		case 0x50: //not done
			break;

		case 0x51: //not done
			break;

		case 0x52: //not done
			break;

		case 0x53: //not done
			break;

		case 0x54: //not done
			break;

		case 0x55: //not done
			break;

		case 0x56: //MOV D,M
			d = memory[(((uint16_t) h << 8) + l)];
			break;

		case 0x57: //not done
			break;

		case 0x58: //not done
			break;

		case 0x59: //not done
			break;

		case 0x5a: //not done
			break;

		case 0x5b: //not done
			break;

		case 0x5c: //not done
			break;

		case 0x5d: //not done
			break;

		case 0x5e: //MOV E,M
			e = memory[(((uint16_t) h << 8) + l)];
			break;

		case 0x5f: //not done
			break;

		case 0x60: //not done
			break;

		case 0x61: //not done
			break;

		case 0x62: //not done
			break;

		case 0x63: //not done
			break;

		case 0x64: //not done
			break;

		case 0x65: //not done
			break;

		case 0x66: //MOV H,M
			h = memory[(((uint16_t) h << 8) + l)];
			break;

		case 0x67: //not done
			break;

		case 0x68: //not done
			break;

		case 0x69: //not done
			break;

		case 0x6a: //not done
			break;

		case 0x6b: //not done
			break;

		case 0x6c: //not done
			break;

		case 0x6d: //not done
			break;

		case 0x6e: //not done
			break;

		case 0x6f: //MOV L,A
			l = a;
			break;

		case 0x70: //not done
			break;

		case 0x71: //not done
			break;

		case 0x72: //not done
			break;

		case 0x73: //not done
			break;

		case 0x74: //not done
			break;

		case 0x75: //not done
			break;

		case 0x76: //not done
			break;

		case 0x77: //MOV M,A
			memory[(((uint16_t) h << 8) + l)] = a;
			break;

		case 0x78: //not done
			break;

		case 0x79: //not done
			break;

		case 0x7a: //MOV A,D
			a = d;
			break;

		case 0x7b: //MOV A,E
			a = e;
			break;

		case 0x7c: //MOV A,H
			a = h;
			break;

		case 0x7d: //not done
			break;

		case 0x7e: //MOV H,M
			a = memory[(((uint16_t) h << 8) + l)];
			break;

		case 0x7f: //not done
			break;

		case 0x80: //not done
			break;

		case 0x81: //not done
			break;

		case 0x82: //not done
			break;

		case 0x83: //not done
			break;

		case 0x84: //not done
			break;

		case 0x85: //not done
			break;

		case 0x86: //not done
			break;

		case 0x87: //not done
			break;

		case 0x88: //not done
			break;

		case 0x89: //not done
			break;

		case 0x8a: //not done
			break;

		case 0x8b: //not done
			break;

		case 0x8c: //not done
			break;

		case 0x8d: //not done
			break;

		case 0x8e: //not done
			break;

		case 0x8f: //not done
			break;

		case 0x90: //not done
			break;

		case 0x91: //not done
			break;

		case 0x92: //not done
			break;

		case 0x93: //not done
			break;

		case 0x94: //not done
			break;

		case 0x95: //not done
			break;

		case 0x96: //not done
			break;

		case 0x97: //not done
			break;

		case 0x98: //not done
			break;

		case 0x99: //not done
			break;

		case 0x9a: //not done
			break;

		case 0x9b: //not done
			break;

		case 0x9c: //not done
			break;

		case 0x9d: //not done
			break;

		case 0x9e: //not done
			break;

		case 0x9f: //not done
			break;

		case 0xa0: //not done
			break;

		case 0xa1: //not done
			break;

		case 0xa2: //not done
			break;

		case 0xa3: //not done
			break;

		case 0xa4: //not done
			break;

		case 0xa5: //not done
			break;

		case 0xa6: //not done
			break;

		case 0xa7: //ANA A
			a = setCond8(a & a, a, a, 0x2);
			cy = 0;
			break;

		case 0xa8: //not done
			break;

		case 0xa9: //not done
			break;

		case 0xaa: //not done
			break;

		case 0xab: //not done
			break;

		case 0xac: //not done
			break;

		case 0xad: //not done
			break;

		case 0xae: //not done
			break;

		case 0xaf: //XRA A
			a = setCond8(a ^ a, a, a, 0x2);
			cy = 0;
			break;

		case 0xb0: //not done
			break;

		case 0xb1: //not done
			break;

		case 0xb2: //not done
			break;

		case 0xb3: //not done
			break;

		case 0xb4: //not done
			break;

		case 0xb5: //not done
			break;

		case 0xb6: //not done
			break;

		case 0xb7: //not done
			break;

		case 0xb8: //not done
			break;

		case 0xb9: //not done
			break;

		case 0xba: //not done
			break;

		case 0xbb: //not done
			break;

		case 0xbc: //not done
			break;

		case 0xbd: //not done
			break;

		case 0xbe: //not done
			break;

		case 0xbf: //not done
			break;

		case 0xc0: //not done
			break;

		case 0xc1: //POP B
			c = memory[sp];
			b = memory[sp+1];
			sp += 2;
			break;

		case 0xc2: //JNZ adr
			if(z == 0)
				pc = ((uint16_t) memory[pc+2] << 8) + memory[pc+1] - 1;
			else
				pc += 2;
			break;

		case 0xc3: //JMP adr
			pc = ((uint16_t) memory[pc+2] << 8) + memory[pc+1] - 1;
			break;

		case 0xc4: //not done
			pc += 2;
			break;

		case 0xc5: //PUSH B
			memory[sp-2] = c;
			memory[sp-1] = b;
			sp -= 2;
			break;

		case 0xc6: //ADI D8
			a = setCond8(a + memory[pc+1], a, memory[pc+1], 0x4);
			pc += 1;
			break;

		case 0xc7: //not done
			break;

		case 0xc8: //not done
			break;

		case 0xc9: //RET
			pc = ((uint16_t) memory[sp+1] << 8) + memory[sp];
			sp += 2;
			break;

		case 0xca: //not done
			pc += 2;
			break;

		case 0xcc: //not done
			pc += 2;
			break;

		case 0xcd: //CALL adr
			memory[sp-2] = pc & 0xff;
			memory[sp-1] = (pc & 0xff00) >> 8;
			sp -= 2;

			pc = ((uint16_t) memory[pc+2] << 8) + memory[pc+1] - 1;
			break;

		case 0xce: //not done
			pc += 1;
			break;

		case 0xcf: //not done
			break;

		case 0xd0: //not done
			break;

		case 0xd1: //POP D
			e = memory[sp];
			d = memory[sp+1];
			sp += 2;
			break;

		case 0xd2: //not done
			pc += 2;
			break;

		case 0xd3: //OUT D8
			port[memory[pc+1]] = a;
			pc += 1;
			break;

		case 0xd4: //not done
			pc += 2;
			break;

		case 0xd5: //PUSH D
			memory[sp-2] = e;
			memory[sp-1] = d;
			sp -= 2;
			break;

		case 0xd6: //not done
			pc += 1;
			break;

		case 0xd7: //not done
			break;

		case 0xd8: //not done
			break;

		case 0xda: //not done
			pc += 2;
			break;

		case 0xdb: //not done
			pc += 1;
			break;

		case 0xdc: //not done
			pc += 2;
			break;

		case 0xde: //not done
			pc += 1;
			break;

		case 0xdf: //not done
			break;

		case 0xe0: //not done
			break;

		case 0xe1: //POP H
			l = memory[sp];
			h = memory[sp+1];
			sp += 2;
			break;

		case 0xe2: //not done
			pc += 2;
			break;

		case 0xe3: //not done
			break;

		case 0xe4: //not done
			pc += 2;
			break;

		case 0xe5: //PUSH H
			memory[sp-2] = l;
			memory[sp-1] = h;
			sp -= 2;
			break;

		case 0xe6: //ANI D8
			a = setCond8(a & memory[pc+1], a, memory[pc+1], 0x4);
			pc += 1;
			break;

		case 0xe7: //not done
			break;

		case 0xe8: //not done
			break;

		case 0xe9: //not done
			break;

		case 0xea: //not done
			pc += 2;
			break;

		case 0xeb: //XCHG 
		{
			uint8_t tmp2 = e;
			uint8_t tmp1 = d;
			e = l;
			d = h;
			l = tmp2;
			h = tmp1;
		}
			break;

		case 0xec: //not done
			pc += 2;
			break;

		case 0xee: //not done
			pc += 1;
			break;

		case 0xef: //not done
			break;

		case 0xf0: //not done
			break;

		case 0xf1: //POP PSW
		{
			uint8_t flags = memory[sp];
			cy = flags & 0x1;
			ac = (flags & 0x10) >> 4;
			s  = (flags & 0x80) >> 7;
			z  = (flags & 0x40) >> 6;
			p  = (flags & 0x4) >> 2;
			a = memory[sp+1];
			sp += 2;
		}
			break;

		case 0xf2: //not done
			pc += 2;
			break;

		case 0xf3: //DI
			interrupt = false;
			break;

		case 0xf4: //not done
			pc += 2;
			break;

		case 0xf5: //PUSH PSW
		{
			memory[sp-2] = (s << 7) + (z << 6) + (ac << 4) + (p << 2) + 0x2 + cy;
			memory[sp-1] = a;
			sp -= 2;
		}
			break;

		case 0xf6: //not done
			pc += 1;
			break;

		case 0xf7: //not done
			break;

		case 0xf8: //not done
			break;

		case 0xf9: //not done
			break;

		case 0xfa: //not done
			pc += 2;
			break;

		case 0xfb: //EI
			interrupt = true;
			break;

		case 0xfc: //not done
			pc += 2;
			break;

		case 0xfe: //CPI D8
			setCond8(a - memory[pc+1], memory[pc+1], a, 0xf);
			cy = (a < memory[pc+1]);
			pc += 1;
			break;

		case 0xff: //not done
			break;
	}	
	pc++;
 
}

//flags - 0x2 logic inst 0x4 math inst
//also make sure diff is the thing you're adding/subtracting from the original (so the thing right of the operation)
uint8_t si8080::setCond8(uint16_t ans, uint8_t old, uint8_t diff, uint8_t flags) {
	if((flags & 0x2) == 0x2) {
		cy = 0;
		ac = 0;
		s = ((a & 0x80) != 0);
		z = (a == 0);
		p = checkParity(a & 0xff);
	}
	if((flags & 0x4) == 0x4) {
		cy = (ans > 0xff);
		ac = checkAC(ans & 0xff, diff, old);
		s = ((ans & 0x80) != 0);
		z = ((ans & 0xff) == 0);
		p = checkParity(ans & 0xff);
	}

	return ans & 0xff;
}

uint8_t si8080::checkParity(uint8_t ans) {
	bitset<8> bs(ans);
	int count = 0;
	for(unsigned int i = 0; i < bs.to_string().size(); i++) {
		if(bs.to_string().substr(i, 1).compare("1") == 0) 
			count++;
	}

	return (count % 2 == 1);
}

uint8_t si8080::checkAC(uint8_t ans, uint16_t diff, uint16_t old) {
	return (((old ^ diff ^ ans) & 0x10) == 0x10);
}

/*if(ans >= old) {
		return (~((old ^ diff) & 0x10) == (ans & 0x10));
	}
	else {
		return ((old & 0x8) == 0 && (diff & 0x8) == 1);
	}

the above is my own personal way of doing it but somebody showed me a much simplier way so I decided to use that instead

ha idiot
*/

void si8080::vramChange(uint8_t value) { //Couldnt be right, but fuck it :D
	bool forceStopRendering = true;
	if(forceStopRendering){
		//cout << dec << value << endl; 
		uint16_t loc = ((uint16_t) h << 8) + l - 0x2400;
		
		if(pc == 0x143b) {
			cout << "draw" << endl;
		}
		
		//loc = 0x100
		int offset = loc * 8; //800
		int y = offset / 256; //1
		int x = offset - (y*256); //0
		
		for(int i = 0; i < 8; i++) {
			bool bit = (((value >> i) & 0x1) == 0x1);
			
			if(y < 16 * 8) {
				if(x < 16 * 8) 
					pixels[offset + i] = (bit) ? 0xFFFFFFFF : 0x0; //white 
				else if(x < 118 * 8) 
					pixels[offset + i] = (bit) ? 0x00FF00FF : 0x0; //green
				else if(x < 224 * 8) 
					pixels[offset + i] = (bit) ? 0xFFFFFFFF : 0x0; //white
			}
			else if(y < 72 * 8)
				pixels[offset + i] = (bit) ? 0x00FF00FF : 0x0; //green
			else if(y < 192 * 8)
				pixels[offset + i] = (bit) ? 0xFFFFFFFF : 0x0;//white
			else if(y < 224 * 8)
				pixels[offset + i] = (bit) ? 0xFF0000FF : 0x0; //red
			else if(y < 256 * 8)
				pixels[offset + i] = (bit) ? 0xFFFFFFFF : 0x0; //white
		}
		
		drawFlag = true;
	}
} 